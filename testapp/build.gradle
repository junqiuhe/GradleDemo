apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        applicationId rootProject.ext.android.applicationId
        versionCode 1
        versionName "1.0"

        missingDimensionStrategy "api", "minApi24", "minApi23", "minApi21"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    /**
     * 情形3、Library中有某个dimension维度, 但是app中却没有
     * 如: :testlibrary 有 api dimension, 但是 :app中没有 api dimension
     *
     * 可以通过 missingDimensionStrategy 属性来设置选择策略
     * 说明: missingDimensionStrategy 属性的第一个值为 dimension 维度, 后面的 strings 为该维度下的渠道 flavors.
     *
     * （注意：在该情景下，若app中有某个dimension维度，但library中却没有，不会对app有任何影响）
     */
    flavorDimensions "mode"
    productFlavors {
        demo {
            dimension "mode"
            missingDimensionStrategy "api", "minApi23"
        }

        full {
            dimension "mode"
            missingDimensionStrategy "api", "minApi21"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->

            println "ourputFile: ${output.outputFile.name}, " +
                    "flavorName: ${variant.flavorName}, " +
                    "buildType: ${variant.buildType.name}"

            def fileName = "jackh_${variant.flavorName}_${variant.buildType.name}_${buildTime()}.apk"
            outputFileName = fileName
            println fileName
        }
    }
}

static def buildTime(){
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(":testlibrary")

    implementation rootProject.ext.dependencies["appcompat"]
    implementation rootProject.ext.dependencies["constriant"]

    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["androidJunit"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
}
